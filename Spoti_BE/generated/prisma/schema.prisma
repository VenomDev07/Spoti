// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://neonDb_owner:1yx4WmCDusgB@ep-muddy-dream-a57bj4sq-pooler.us-east-2.aws.neon.tech/neonDb?sslmode=require"
}

model User {
  id         Int         @id @default(autoincrement())
  username   String      @unique
  email      String      @unique
  password   String
  createdAt  DateTime    @default(now())
  likedSongs LikedSong[]
}

model Artist {
  id           Int      @id @default(autoincrement())
  name         String
  bio          String?
  profileImage String?
  createdAt    DateTime @default(now())
  albums       Album[]
  songs        Song[]
}

model Album {
  id          Int       @id @default(autoincrement())
  title       String
  releaseDate DateTime?
  coverImage  String?
  artistId    Int
  artist      Artist    @relation(fields: [artistId], references: [id], onDelete: Cascade)
  songs       Song[]
  createdAt   DateTime  @default(now())
}

model Song {
  id        Int         @id @default(autoincrement())
  title     String
  duration  Int?
  audioUrl  String
  imageUrl  String
  videoUrl  String
  artistId  Int
  albumId   Int?
  artist    Artist      @relation(fields: [artistId], references: [id], onDelete: Cascade)
  album     Album?      @relation(fields: [albumId], references: [id])
  likedBy   LikedSong[]
  createdAt DateTime    @default(now())
}

model LikedSong {
  userId  Int
  songId  Int
  likedAt DateTime @default(now())
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  song    Song     @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@id([userId, songId])
}
